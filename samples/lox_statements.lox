print "one";
print true;
print 2 + 1;

// Expressions without a print statement should not display anything.
3 * 2;
1 + 1;

// Testing scope (1)
var a = "global a";
var b = "global b";
var c = "global c";
{
  var a = "outer a";
  var b = "outer b";
  {
    var a = "inner a";
    print a;
    print b;
    print c;
  }
  print a;
  print b;
  print c;
}
print a;
print b;
print c;

// Testing scope (2)

var a = 1;
{
    var b = a + 2; // Right hand side init expression is evaluated before assignment, thus a + 2 should resolve to 3.
    print b;
}

// Testing conditional flow
var a = true;
var b = false;

if (a) print "a = true"; else print "a = false";
a = false;
if (a) if (b) print "b = true"; else print "b = false"; else print "a = false";

// Testing or & and operators
print "hi" or 2; // Prints "hi"
print nil or "yes"; // Prints "yet"
print 1 and 2; // prints 2
print false and true; // prints false
print 2 > 1 and 5 < 10; // prints true

print 2 > 1 and 5 > 10 or 10 > 5; // prints true
print (2 > 1 and 5 > 10) or 10 > 5; // prints true (equal to the statement before)
print 2 > 1 and (5 > 10 or 10 > 5); // prints true (equal to the statement before)
print 2 > 1 and (5 > 10 or 10 > 50); // prints false

print "---------------------------";
print "Testing || and && operators";
print 1 && 2; // 2
print 2 && 2; // 2
print true || false; // true
print false || true; // true
print true && false; // false
print false || false; // false
print "---------------------------";

// While loops

// Fibonacci
print "Testing Fibonacci with while loops";

var a = 0;
var b = 1;

while (a < 1000) {
  print a;
  var temp = a;
  a = b;
  b = temp + b;
}

// For loop
print "Testing for loops";

for (var i = 0; i < 10; i = i + 1) {
    print i;
}

// The following should loop forever.

//for (var i = 0; a;) {
//    print "test";
//}

// Test functions

fun sayHi(first, last) {
    print "Hi, " + first + " " + last + "!";
}

sayHi("Dear", "Reader");

// Test recursion
fun countDownFrom(n) {
    if (n > 0) {
        print "Counting " + n;
        countDownFrom(n - 1);
    }
}
countDownFrom(5);

// Test return statements
fun fibonacci(n) {
    if (n <= 1) return n;
    return fibonacci(n - 2) + fibonacci(n - 1);
}

for (var i = 0; i < 20; i = i + 1) {
    print "Fib " + i + ": " + fibonacci(i);
}

// Closures
fun makePoint(x, y) {
    fun closure(method) {
        if (method == "x") return x;
        if (method == "y") return y;
        print "unknown method " + method;
    }

    return closure;
}

var point = makePoint(2, 3);
print point("x"); // 2
print point("y"); // 3

// Class declarations
class FirstClass {
    firstMethod() {
        return "Hello class!";
    }
}

print FirstClass;